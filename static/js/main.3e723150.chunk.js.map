{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","style","fontFamily","href","title","type","id","to","role","action","autocomplete","target","placeholder","name","onClick","toggle","htmlFor","switch1","Textform","useState","text","setText","React","boldFont","setBoldFont","fontFamily1","setFontFamily","heading","fontWeight","value","onChange","event","rows","newText","toUpperCase","toLowerCase","go","str","split","i","length","charAt","slice","join","titleCase","filter","ele","About","backgroundColor","color","mystyles","setMode","btn","setBtnText","defaultProps","App","switchtext","setswitchtext","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e723150.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} shadow bg-${props.mode}`} style={{ fontFamily: \"sans-serif\" }}>\r\n            <div className=\"container-fluid\">\r\n                <a className={`navbar-brand fw-bold fs-3 text-${props.mode === 'light' ? 'dark' : 'light'}`} href=\"https://www.title.com\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0 \">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active fw-normal\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link fw-normal\" to=\"/about\">About</Link>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle fw-normal\" id=\"navbarDropdown\" href=\"https://www.more.com\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                                MORE\r\n                            </a>\r\n                            <ul className=\"dropdown-menu bg-primary\" aria-labelledby=\"navbarDropdown\">\r\n                                <li><a className=\"dropdown-item text-warning\" href=\"https://www.learn.com\">Learn</a></li>\r\n                                <li><a className=\"dropdown-item text-warning\" href=\"https://www.youtube.com/\">Youtube</a></li>\r\n                                <li><a className=\"dropdown-item text-warning\" href=\"https://www.google.com/search\">Google</a></li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"d-flex\" action=\"https://www.google.co.in/search\" autocomplete=\"off\" target=\"_blank\">\r\n                        <input className={`form-control  bg-${props.mode === 'light' ? 'light ' : 'secondary text-light'}`} type=\"search\" placeholder=\"Find Article\" aria-label=\"Search\" name=\"q\" />\r\n                        <button className=\"btn btn-outline-danger ms-2 bg-light\" type=\"submit\">Search</button>\r\n                    </form>\r\n                    <div className=\"form-check form-switch ms-3\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggle} id=\"flexSwitchCheckDefault\" />\r\n                        <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">{props.switch1}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\nNavbar.defaultProps = {\r\n    title: 'JOSE:)'\r\n};","import React, { useState } from 'react'\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState('');\r\n    const [boldFont, setBoldFont] = React.useState(false);\r\n    const [fontFamily1, setFontFamily] = React.useState(false);\r\n    const handleUpclick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoclick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleClear = () => {\r\n        setText(\"\");\r\n    }\r\n    const handleTitleclick = () => {\r\n        // here it goes \r\n        let go = titleCase(text);\r\n        setText(go);\r\n        function titleCase(str) {\r\n            str = str.toLowerCase().split(' ');\r\n            for (var i = 0; i < str.length; i++) {\r\n                str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\r\n            }\r\n            return str.join(' ');\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n    // here are its fun tions\r\n    //using CSS for bold and other types of properties.\r\n    /* let styles1 = {\r\n         fontFamily: \"sans-serif\",\r\n         fontStyle1: \"italic\",\r\n         fontStyle2: \"bold\"\r\n     }*/\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"mb-3 ms-5 me-5\">\r\n                    <label htmlFor=\"box\" className={`form-label text-${props.mode === 'light' ? 'dark' : 'light'} fw-bold fs-5`} >{props.heading}</label>\r\n                    <textarea style={{\r\n                        fontWeight: boldFont ? \"bold\" : \"normal\",\r\n                        fontFamily: fontFamily1 ? \"sans-serif\" : \"normal\",\r\n                    }} placeholder=\"Write in Here\" value={text} onChange={handleOnChange} className={`form-control bg-${props.mode === 'light' ? 'light' : 'secondary text-light'}`} id=\"box\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"mb-3 ms-5 me-3 btn btn-primary mx-1 my-1\" onClick={handleUpclick} >Convert to UpperCase</button>\r\n                <button className=\"mb-3 ms-5 me-3 btn btn-primary mx-1 my-1\" onClick={handleLoclick} >Convert to lowerCase</button>\r\n                <button className=\"mb-3 ms-5 me-3 btn btn-primary mx-1 my-1\" onClick={handleTitleclick} >Convert to TitleCase</button>\r\n                <button className=\"mb-3 ms-5 me-3 btn btn-success mx-1 my-1\" onClick={handleClear}>Clear</button>\r\n                <div className=\"dropdown mb-3 ms-5 me-3\">\r\n                    <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                        Styles\r\n                    </button>\r\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                        <button className=\"dropdown-item\" onClick={() => setBoldFont(!boldFont)}>Bold</button>\r\n                        <button className=\"dropdown-item\" onClick={() => setFontFamily(!fontFamily1)}>Sans Serif</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container-hover\">\r\n                <div className={`mb-3 ms-5 me-5  text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                    <h2 className=\"text-danger\">Summary</h2>\r\n                    <p>words :{text.split(\" \").filter((ele) => { return ele.length !== 0 }).length} and characters :{text.length}</p>\r\n                    <h3 className=\"text-danger\">Estimated time to Read</h3>\r\n                    <p>{0.008 * text.split(\" \").length} min</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyles, setMode] = useState({\r\n        backgroundColor: \"white\",\r\n        color: \"black\"\r\n    })\r\n    const [btn, setBtnText] = useState(\"Enable Dark Mode\")\r\n    const togbtn = () => {\r\n        if (mystyles.backgroundColor === \"white\") {\r\n            setMode({\r\n                backgroundColor: \"black\",\r\n                color: \"white\"\r\n            })\r\n            setBtnText(\"Enable White Mode\")\r\n        }\r\n        else {\r\n            setMode({\r\n                backgroundColor: \"white\",\r\n                color: \"black\"\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container my-5\" style={mystyles}>\r\n            <h2 className=\"fw-bold\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\" style={mystyles}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mystyles}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyles}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={mystyles}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item \" style={mystyles}>\r\n                    <h2 className=\"accordion-header \" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={mystyles}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary mb-3 my-2\" onClick={togbtn}>{btn}</button>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [switchtext, setswitchtext] = useState('Enable Dark Theme')\n  const darkenable = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      setswitchtext('Enable Light Theme');\n      document.body.style.backgroundColor = 'black';\n    }\n    else {\n      setMode('light');\n      setswitchtext('Enable Dark Theme');\n      document.body.style.backgroundColor = 'white';\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextChanger\" mode={mode} toggle={darkenable} switch1={switchtext} />\n        <div className=\"container my-4\">\n\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\">\n              <Textform heading=\"Enter Text To Analyze\" mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\nexport default App;\n/*\n in the last and final phase for developing the project.\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}